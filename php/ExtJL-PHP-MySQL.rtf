{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Configuration d'un serveur Web\
\
La configuration se trouve dans /etc/httpd (ou apache2)/httpd.conf et dans les fichiers connexes.\
\
Pour faire prendre en compte les modifications par apache il faut lancer la commande suivante : \
	sudo apachectl restart (graceful,stop/start)\
\
\
S'assurer que le site est accessible et fonctionne en php.\
\
Ecrire le script suivant dans un fichier index.php situ\'e9 dans un dossier extJS accessible par le serveur :\
<?\
phpinfo()\
?>\
Et v\'e9rifier son ex\'e9cution : http://localhost/~metzger9/extJS/\
\
Ensuite v\'e9rifier la possibilit\'e9 de connexion \'e0 la base de donn\'e9es. Pour ce faire on \'e9crit deux fonctions distincts. L'une fait la connexion \'e0 la base et retourne un pointeur sur la connexion. L'autre utilise le pointeur et fait un requ\'eate SQL. On verra plus tard avec des objets !!\
\
  mysql_connect("localhost", "user", "mdl") or\
  die("Could not connect: " . mysql_error());\
  mysql_select_db("base");\
  $query = "SELECT * FROM Sites";\
  $result = mysql_query($query);\
  $nbrows = mysql_num_rows($result);	\
  if($nbrows>0)\{\
    while($rec = mysql_fetch_array($result))\{     // render the right date format\
      $arr[] = $rec;\
    \}\
    $jsonresult = $arr;\
    echo '(\{"total":"'.$nbrows.'","results":'.$jsonresult.'\})';\
  \} else \{\
    echo '(\{"total":"0", "results":""\})';\
  \}\
\
Une fois la connexion \'e9tablie, on veux pouvoir obtenir le contenu du tableau issu de la requ\'eate sous forme JSON. Pour ce faire il faut ajouter la fonction suivante :\
\
function JEncode($arr)\{\
    if (version_compare(PHP_VERSION,"5.2","<"))\
    \{    \
        require_once("./JSON.php");   //if php<5.2 need JSON class\
        $json = new Services_JSON();  //instantiate new json object\
        $data=$json->encode($arr);    //encode the data in json format\
    \} else\
    \{\
        $data = json_encode($arr);    //encode the data in json format\
    \}\
    return $data;\
\}\
\
\
Cr\'e9ation d'une application ExtJS en coffee\
\
Pr\'e9paration d'un page HTML accueillant l'application.\
Il faut int\'e9grer la librairie ExtJS et les CSS associ\'e9s. On le fera \'e0 partir du CDN sencha. Ensuite il faut cr\'e9er un premier fichier que l'on appellera mainscript.js pour l'application\
\
Fichier extsj.html.haml :\
\
!!! 5\
%html\
  %head\
    %meta\{:charset => "utf-8"\}\
    %title="Test ExtJS"\
    = stylesheet_link_tag "all", "normalize", "http://cdn.sencha.com/ext/gpl/4.2.0/resources/css/ext-all.css"\
  %body\
  = javascript_include_tag "http://cdn.sencha.com/ext/gpl/4.2.0/ext-all.js", "mainscript"\
\
Dans la derni\'e8re ligne on d\'e9clare le fichier que l'on veux ex\'e9cuter pour l'application. Voici son pour commencer : \
\
Ext.application\
  autoCreateViewport: true\
  name: "SuiviWeb"\
  \
Ext.onReady ->\
\
On peu v\'e9rifier que tout ce passe bien dans le navigateur. Si l'on d\'e9-commente la deuxi\'e8me ligne on constate que l'application fait appel \'e0 un fichier Viewport.js que l'on va donc cr\'e9er : \
\
Ext.define("SuiviWeb.view.Viewport", \
  extend: "Ext.container.Viewport" \
  #requires: [ "SuiviWeb.view.TodoPanel" ]\
\
)\
\
Attention il ne faut pas oublier de l'ajouter dans la liste des fichiers js \'e0 inclure dans la page.\
\
}